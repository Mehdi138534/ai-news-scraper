stages:
  - lint
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.12"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_IMAGE_LATEST: $CI_REGISTRY_IMAGE:latest

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .venv/
    - .cache/pip
    - .cache/pypoetry

# Install dependencies
.install_deps: &install_deps
  before_script:
    - python -V
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install

# Lint job
lint:
  stage: lint
  image: python:${PYTHON_VERSION}-slim
  <<: *install_deps
  script:
    - poetry run flake8 src tests
    - poetry run mypy src
    - poetry run black --check src tests

# Test job
test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  <<: *install_deps
  variables:
    OFFLINE_MODE: "true"  # Run tests in offline mode
  script:
    - poetry run pytest tests/ --cov=src --cov-report=xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# Build Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST
        docker push $DOCKER_IMAGE_LATEST
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment"
    - curl -X POST ${STAGING_WEBHOOK_URL} -H "Content-Type: application/json" -d "{\"image\": \"${DOCKER_IMAGE}\"}"
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment"
    - curl -X POST ${PRODUCTION_WEBHOOK_URL} -H "Content-Type: application/json" -d "{\"image\": \"${DOCKER_IMAGE}\"}"
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_TAG
  when: manual
